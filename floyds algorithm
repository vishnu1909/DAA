#include<stdio.h>
#include<stdlib.h>
#define INF 99999
void printSolution(int **dist, int V);
void floydWarshall(int **graph, int V);
void floydWarshall(int **graph, int V) {
    int i, j, k;
    int **dist = (int **)malloc(V * sizeof(int *));
    for (i=0; i<V; i++)
         dist[i] = (int *)malloc(V * sizeof(int));
    for (i = 0; i < V; i++)
        for (j = 0; j < V; j++)
            dist[i][j] = graph[i][j];
    for (k = 0; k < V; k++) {
        for (i = 0; i < V; i++) {
            for (j = 0; j < V; j++) {
                if (dist[i][k] + dist[k][j] < dist[i][j])
                    dist[i][j] = dist[i][k] + dist[k][j];
            }
        }
    }
    printSolution(dist, V);
    for (i = 0; i < V; i++)
        free(dist[i]);
    free(dist);
}
void printSolution(int **dist, int V) {
    printf ("Following matrix shows the shortest distances between every pair of vertices \n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (dist[i][j] == INF)
                printf("%7s", "INF");
            else
                printf ("%7d", dist[i][j]);
        }
        printf("\n");
    }
}
int main() {
    int V;
    printf("Enter the number of vertices: ");
    scanf("%d", &V);
    int **graph = (int **)malloc(V * sizeof(int *));
    for (int i=0; i<V; i++)
         graph[i] = (int *)malloc(V * sizeof(int));

    printf("Enter the adjacency matrix (use %d for infinity):\n", INF);
    for(int i = 0; i < V; i++) {
        for(int j = 0; j < V; j++) {
            scanf("%d", &graph[i][j]);
        }
    }
    floydWarshall(graph, V);
    for (int i = 0; i < V; i++)
        free(graph[i]);
    free(graph);
    return 0;
}
=====================================================================================================
OUTPUT:
Enter the number of vertices: 4
Enter the adjacency matrix (use 99999 for infinity):
0
5
99999
10
99999
0
3
99999
99999
99999
0
1
99999
99999
99999
0
Following matrix shows the shortest distances between every pair of vertices 
      0      5      8      9
    INF      0      3      4
    INF    INF      0      1
    INF    INF    INF      0
